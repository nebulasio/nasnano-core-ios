// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Transaction.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TransactionRoot

@implementation TransactionRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - TransactionRoot_FileDescriptor

static GPBFileDescriptor *TransactionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"corepb"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Data

@implementation Data

@dynamic type;
@dynamic payload;

typedef struct Data__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  NSData *payload;
} Data__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = Data_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Data__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = NULL,
        .number = Data_FieldNumber_Payload,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Data__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Data class]
                                     rootClass:[TransactionRoot class]
                                          file:TransactionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Data__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Transaction

@implementation Transaction

@dynamic hash_p;
@dynamic from;
@dynamic to;
@dynamic value;
@dynamic nonce;
@dynamic timestamp;
@dynamic hasData_p, data_p;
@dynamic chainId;
@dynamic gasPrice;
@dynamic gasLimit;
@dynamic alg;
@dynamic sign;

typedef struct Transaction__storage_ {
  uint32_t _has_storage_[1];
  uint32_t chainId;
  uint32_t alg;
  NSData *hash_p;
  NSData *from;
  NSData *to;
  NSData *value;
  Data *data_p;
  NSData *gasPrice;
  NSData *gasLimit;
  NSData *sign;
  uint64_t nonce;
  int64_t timestamp;
} Transaction__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hash_p",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_Hash_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Transaction__storage_, hash_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Transaction__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_To,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Transaction__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_Value,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Transaction__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "nonce",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_Nonce,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Transaction__storage_, nonce),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_Timestamp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Transaction__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(Data),
        .number = Transaction_FieldNumber_Data_p,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Transaction__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chainId",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_ChainId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Transaction__storage_, chainId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "gasPrice",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_GasPrice,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Transaction__storage_, gasPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "gasLimit",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_GasLimit,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Transaction__storage_, gasLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "alg",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_Alg,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Transaction__storage_, alg),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sign",
        .dataTypeSpecific.className = NULL,
        .number = Transaction_FieldNumber_Sign,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Transaction__storage_, sign),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Transaction class]
                                     rootClass:[TransactionRoot class]
                                          file:TransactionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Transaction__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
